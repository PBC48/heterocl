from __future__ import print_function
#import keras
#from keras.datasets import cifar100
#from keras.preprocessing.image import ImageDataGenerator
#from keras.models import Model, Sequential
#from keras.layers import Dense, Dropout, Activation, Flatten, Input
#from keras.layers import Conv2D, MaxPooling2D
import numpy as np
import random
import cv2
import matplotlib.pyplot as plot
import os
import tarfile
import torchvision
root = "/home/pbc48/install/datasets/imagenet_2012/images/val"
val_tag = [];
val_img = [];
j=0;
samples_per_class = 1
folder_list = os.listdir(root)
for i in range(len(folder_list)):
    folder_path = root + "/" + folder_list[i]
    img_list = os.listdir(folder_path)
    for img_name in img_list:
        j+=1
        print("{} out of {} \r".format(j,samples_per_class*1000),end="")
        img_path = folder_path+"/"+img_name
        file=cv2.imread(img_path)
        file=cv2.resize(file,(299,299))
        file=cv2.cvtColor(file, cv2.COLOR_BGR2RGB)
        file=np.array(file).reshape((3,299,299))
        val_img.append(file)
        val_tag.append(i)
        if(j%samples_per_class==0):
            break
dest = "/home/pbc48/install/datasets/imagenet_numpy/images/val/"
np.save(dest+"x_test_xception.npy",val_img)
np.save(dest+"y_test_xception.npy",val_tag)
"""#print(img)
batch_size = 25
num_classes = 1000
epochs = 25
data_augmentation = False
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_mobilenet.h5'

# The data, split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar100.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = keras.applications.VGG16(include_top=True, weights=None,
        input_shape=(32, 32, 3), classes=100)

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        zca_epsilon=1e-06,  # epsilon for ZCA whitening
        rotation_range=0,
        # randomly rotate images in the range (degrees, 0 to 180)
        # randomly shift images horizontally (fraction of total width)
        width_shift_range=0.1,
        # randomly shift images vertically (fraction of total height)
        height_shift_range=0.1,
        shear_range=0.,  # set range for random shear
        zoom_range=0.,  # set range for random zoom
        channel_shift_range=0.,  # set range for random channel shifts
        # set mode for filling points outside the input boundaries
        fill_mode='nearest',
        cval=0.,  # value used for fill_mode = "constant"
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False,  # randomly flip images
        # set rescaling factor (applied before any other transformation)
        rescale=None,
        # set function that will be applied on each input
        preprocessing_function=None,
        # image data format, either "channels_first" or "channels_last"
        data_format="channels_first",
        # fraction of images reserved for validation (strictly between 0 and 1)
        validation_split=0.0)

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(x_test, y_test))

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])"""
